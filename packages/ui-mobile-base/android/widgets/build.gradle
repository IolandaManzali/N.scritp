apply plugin: 'com.android.library'

def computeCompileSdkVersion () {
    if(project.hasProperty("compileSdk")) {
        return compileSdk
    }
    else {
        return 28
    }
}

def computeBuildToolsVersion() {
    if(project.hasProperty("buildToolsVersion")) {
        return buildToolsVersion
    }
    else {
        return "31.0.0"
    }
}

def computeTargetSdkVersion() {
    if(project.hasProperty("targetSdk")) {
        return targetSdk
    }
    else {
        return 28
    }
}

android {
    compileSdkVersion computeCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion computeTargetSdkVersion()
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

		def androidXAppCompatVersion = "1.3.1"
		if (project.hasProperty("androidXAppCompat")) {
			androidXAppCompatVersion = androidXAppCompat
		}
		def androidXExifInterfaceVersion = "1.3.2"
		if (project.hasProperty("androidXExifInterface")) {
			androidXExifInterfaceVersion = androidXExifInterface
		}
		def androidXFragmentVersion = "1.3.6"
		if (project.hasProperty("androidXFragment")) {
			androidXFragmentVersion = androidXFragment
		}
		def androidXTransitionVersion = "1.4.1"
		if (project.hasProperty("androidXTransition")) {
			androidXTransitionVersion = androidXTransition
		}
		def androidXViewPagerVersion = "1.0.0"
		if (project.hasProperty("androidXViewPager")) {
			androidXViewPagerVersion = androidXViewPager
		}
		implementation "androidx.viewpager:viewpager:$androidXViewPagerVersion"
		implementation "androidx.fragment:fragment:$androidXFragmentVersion"
		implementation "androidx.transition:transition:$androidXTransitionVersion"
		implementation "androidx.exifinterface:exifinterface:$androidXExifInterfaceVersion"
		implementation "androidx.appcompat:appcompat:$androidXAppCompatVersion"
}

task cleanBuildDir (type: Delete) {
    delete "../build/"
}

task copyAar {
    copy {
        from "build/outputs/aar/widgets-release.aar"
        into "../build/"
    }
}

assemble.dependsOn(cleanBuildDir)
copyAar.dependsOn(assemble)
build.dependsOn(copyAar)
